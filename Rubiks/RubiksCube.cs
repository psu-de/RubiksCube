using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TensorCS.Core;

namespace Rubiks {
    public class RubiksCube {

        //U Move Permutation
        //          ┌──┬──┬──┐                          //          ┌──┬──┬──┐
        //          │45│46│47│                          //          │51│48│45│ 
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤
        //          │48│49│50│                          //          │52│49│46│
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤
        //          │51│52│53│                          //          │53│50│47│
        // ┌──┬──┬──┼──┼──┼──┼──┬──┬──┐                 // ┌──┬──┬──┼──┼──┼──┼──┬──┬──┐        
        // │27│28│29│0 │1 │2 │9 │10│11│                 // │0 │1 │2 │9 │10│11│26│25│24│        
        // ├──┼──┼──┼──┼──┼──┼──┼──┼──┤                 // ├──┼──┼──┼──┼──┼──┼──┼──┼──┤        
        // │30│31│32│3 │4 |5 │12│13│14│                 // │30│31│32│3 │4 |5 │12│13│14│        
        // ├──┼──┼──┼──┼──┼──┼──┼──┼──┤                 // ├──┼──┼──┼──┼──┼──┼──┼──┼──┤        
        // │33│34│35│6 │7 │8 │15│16│17│                 // │33│34│35│6 │7 │8 │15│16│17│        
        // └──┴──┴──┼──┼──┼──┼──┴──┴──┘                 // └──┴──┴──┼──┼──┼──┼──┴──┴──┘        
        //          │36│37│38│                          //          │36│37│38│
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤
        //          │39│40│41│                          //          │39│40│41│
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤
        //          │42│43│44│                          //          │42│43│44│
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤
        //          │18│19│20│                          //          │18│19│20│
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤
        //          │21│22│23│                          //          │21│22│23│
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤
        //          │24│25│26│                          //          │29│28│27│
        //          └──┴──┴──┘                          //          └──┴──┴──┘



        //X Move Permutation
        //          ┌──┬──┬──┐                          //          ┌──┬──┬──┐         
        //          │45│46│47│                          //          │0 │1 │2 │         
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤         
        //          │48│49│50│                          //          │3 │4 │5 │         
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤         
        //          │51│52│53│                          //          │6 │7 │8 │         
        // ┌──┬──┬──┼──┼──┼──┼──┬──┬──┐                 // ┌──┬──┬──┼──┼──┼──┼──┬──┬──┐
        // │27│28│29│0 │1 │2 │9 │10│11│                 // │29│32│35│36│37│38│15│12│9 │
        // ├──┼──┼──┼──┼──┼──┼──┼──┼──┤                 // ├──┼──┼──┼──┼──┼──┼──┼──┼──┤
        // │30│31│32│3 │4 |5 │12│13│14│                 // │28│31│34│39|40|41│16│13│10│
        // ├──┼──┼──┼──┼──┼──┼──┼──┼──┤                 // ├──┼──┼──┼──┼──┼──┼──┼──┼──┤
        // │33│34│35│6 │7 │8 │15│16│17│                 // │27│30│33│42│43│44│17│14│11│
        // └──┴──┴──┼──┼──┼──┼──┴──┴──┘                 // └──┴──┴──┼──┼──┼──┼──┴──┴──┘
        //          │36│37│38│                          //          │18│19│20│         
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤         
        //          │39│40│41│                          //          │21│22│23│         
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤         
        //          │42│43│44│                          //          │24│25│26│         
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤         
        //          │18│19│20│                          //          │45│46│47│         
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤         
        //          │21│22│23│                          //          │48│49│50│         
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤         
        //          │24│25│26│                          //          │51│52│53│         
        //          └──┴──┴──┘                          //          └──┴──┴──┘         


        //Y Move Permutation
        //          ┌──┬──┬──┐                          //          ┌──┬──┬──┐         
        //          │45│46│47│                          //          │51│48│45│         
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤         
        //          │48│49│50│                          //          │52│49│46│         
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤      
        //          │51│52│53│                          //          │53│50│47│          
        // ┌──┬──┬──┼──┼──┼──┼──┬──┬──┐                 // ┌──┬──┬──┼──┼──┼──┼──┬──┬──┐
        // │27│28│29│0 │1 │2 │9 │10│11│                 // │0 │1 │2 │9 │10│11│26│25│24│
        // ├──┼──┼──┼──┼──┼──┼──┼──┼──┤                 // ├──┼──┼──┼──┼──┼──┼──┼──┼──┤
        // │30│31│32│3 │4 |5 │12│13│14│                 // │3 │4 │5 │12│13|14│23│22│21│
        // ├──┼──┼──┼──┼──┼──┼──┼──┼──┤                 // ├──┼──┼──┼──┼──┼──┼──┼──┼──┤
        // │33│34│35│6 │7 │8 │15│16│17│                 // │6 │7 │8 │15│16│17│20│19│18│
        // └──┴──┴──┼──┼──┼──┼──┴──┴──┘                 // └──┴──┴──┼──┼──┼──┼──┴──┴──┘
        //          │36│37│38│                          //          │38│41│44│         
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤         
        //          │39│40│41│                          //          │37│40│43│         
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤         
        //          │42│43│44│                          //          │36│39│42│         
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤         
        //          │18│19│20│                          //          │35│34│33│         
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤         
        //          │21│22│23│                          //          │32│31│30│         
        //          ├──┼──┼──┤                          //          ├──┼──┼──┤         
        //          │24│25│26│                          //          │29│28│27│         
        //          └──┴──┴──┘                          //          └──┴──┴──┘
        //          



        public BaseTensor<byte> Cube { get; internal set; }

        public RubiksCube() {
            this.Cube = new ByteTensor(new Shape(6, 3, 3));
            for (int f = 0; f < 6; f++) {
                for (int x = 0;x < 3; x++) {
                    for (int y = 0; y < 3; y++) {
                        this.Cube[f, y, x] = (byte)(f + 1);
                    }
                }
            }
        }

        public IEnumerable<RubiksMove> Scramble(int moves = 30) {
            var random = new Random();
            var allMoves = Enum.GetValues<RubiksMove>().ToList();
            allMoves.Remove(RubiksMove.X);
            allMoves.Remove(RubiksMove.Y);
            allMoves.Remove(RubiksMove.Z); 
            allMoves.Remove(RubiksMove._X);
            allMoves.Remove(RubiksMove._Y);
            allMoves.Remove(RubiksMove._Z);
            for (int i = 0; i < moves; i++) {
                var move = allMoves[random.Next(allMoves.Count)];
                this.Move(move);
                yield return move;
            }
        }

        public void Move(RubiksMove move) {
            Rubiks.Move.GetMove(move).Apply(this);
        }

        public IEnumerable<RubiksMove> Move(string sequence) {
            RubiksMove[] moves = Rubiks.Move.Parse(sequence.ToUpper());
            foreach (var move in moves) {
                this.Move(move);
                yield return move;
            }
        }

        public int[] GetFace(RubiksFace face) {
            List<int> faceValues = new List<int>();
            for (int x = 0; x < 3; x++) {
                for (int y = 0; y < 3; y++) {
                    faceValues.Add(this.Cube[(int)face - 1, x, y]);
                }
            }
            return faceValues.ToArray();
        }

        public bool IsSolved() {
            bool solved = true;

            for (int f = 0; f < 6; f++) {
                var face = (RubiksFace)f + 1;
                var values = GetFace(face);
                if (values.Any(x => x != values[0])) {
                    solved = false;
                    break;
                }
            }

            return solved;
        }
    }
}
